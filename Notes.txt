This is an introduction to using flask with python 

This tutorial will go through the following 

Setup & Workflow
Getting the app running
Templates and Static Content
Setting up a Database
Creating a basic CRUD application - TODO Liist application
Deploying to Heroku

====Setting Up Environment====
To set up the environment you need to do the following

install python 3.6+ and PIP
Intsall virtualenv
create a project directory
create a virtual environment
install required packages


-Installing python 3.6+ and PIP-
Check if you have it installed on your device if not search it up and download it


-Install virtualenv-

To install virtualenv you use PIP

this is done in the terminal window

pip install virtualenv

virtualenv allows us to create a virtual environment what this means is that if we want to work with other people or collaborated project it make sit so that all the packages are contained in thr project and not on your device so you can transefer the project and if someone else wants to use it they can just install all the packages into the working directory 

So the next thing you do is create a virtual environment

to do this in the terminal you must use the following command 

virtualenv <name>

This will create a folder where the prokect will be located

windows will then ask you if you want to use the virtual environment as the workspace folder and you say yes

You then need to activate the environment to do this you need to go to the scripts folder and run the "activate" scripts

next you need to install flask and flask-sqlalchemy using pip


You can then create a file called app.py or whatever you want to call it 

We can then go into starting by creating the index file you can check the code out for this in the commit

localhost:5000 is where this application will reside after it has been started


=== Static Content ===

Create 2 folders static and templates

Then in your app.py folder import render_template

In the templates folder createa a file called index.html

Now what we will do in app.py index() method is change waht is returned

instead of returning a string we will return the index.html file

to do this you use the render_template() method and pass in the name of the file, ou do not need to specify the folder as it knows to look in the template folder for the file

This file can contain basic html and when you refresh the page you will see its getting its content from this page 

-Template Inheritance-

Template Inheritance allows us to create 1 master html file that contains the skleton of what each page will look like and just inherit it to each other page and insert code where you need to, it reduces boilerplate code

to do this create a file called base.html in the templates folder

so in this file we willl use jinja syntax this is the template engine that flask uses 

{% block head %} {% endblock %} replace the titile with this code

This code creates a blovk which allows us to insert code in other pages that inherit this template

you can create another block for the body of the webpage

{% block body %} {% endblock %}


Then in index.html we can clear it and inherit the base template to do this you type the following 

{% extends 'base.html' %}

You can then copy the blocks and begin to put code into them using html

Once you reload the page you'll see the content is rendered 

This can be used greatly for referencing links to css


- Static Content - 

create a css folder in the static folder and create a css file and place whatever css you want

in the base.html file you can link the css file 

the only difference to linking the css file is the href

we use jinja 

we use a function from flask called url_for() and pass in the name of the folder and file name  you must incliude subdirectories too

"{{url_for('static' , filename='css/main.css')}}"

we must then also import url_for from flask

This is the same for any javascript file


***Quick Jinja Knowledge***

{% %} - is for loops ifs 
{{}} - things you want to be printed in strings this gives the result of functions pretty much

****


===Setting Up Database====

import sqlalchemy from flask_sqlalchemy in the app.py file

from flask_sqlalchemy import SQLAlchemy

You also need to install mysql-connector-python

Then to configure the application to indicate where the Database is located

To do this you must use the app.config and pass in the keyword SQLALCHEMY_DATABASE_URI and then pass in the url to the Database


app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:root@localhost/pfsql'

Then we initilise the Database and pass in the application

db = SQLAlchemy(app)

we can then create a model


class Todo(db.Model):
    #Attributes
    id = db.Column(db.Integer, primary_key = True)
    content= db.Column(db.String(200))
    date_created= db.Column(db.DateTime , default =datetime.now())

    #Function that returns id using jinja syntax
    def __message__(self):
        return '<Task %r>' % self.id

When making a reference to any fields or funcitons from sqlalchemy you can just use db. and then the required field or method it acts the smae as usual


******VERY IMPORTANT *****
You need to put this code into your settings.json file

 "python.linting.pylintArgs": [
        "--load-plugins",
        "pylint-flask"
    ]

You must then install pylint flask

pip install pylint-flask
*************************


Then create a python shell and import the Database and then create the model and db

>>>from app import db
>>>db.create_all()

This will model all the tables


=== Creating Application ==

write approppriate html in the index.html

Now we will start bulilding the API

in the app.py file we will begin to create the routes that the user will be able to use 

we will start at the index method

in the decorator after the route we will add an option called methods and set it to equal a list of HTTP Methods

@app.route("/", methoods=['POST','GET'])

what this does is that it lets us add methods to th route so instead of get by default we can now post to the route too which we wnat to do to send info to the Database

In the html file we will need a from and 2 input types in this form 

  <form action="/" method="POST">
        <input type="text" name ="content" id="content">
        <input type="submit" value ="Add Task">
    </form>

we indicate the route and it's method

and then we create 2 input types one for the actual text and the other is a button

back to the app.py file index method we will begin to change it up

You need to import request from flask

in the method we will then determine what will happen based on whether the method is post or get

-Adding Task to db-

in the index method we will get the contents of the form that is put into the input field

task_content = request.form['content']

We then create a todo object that will have the content of the information from the input


we will then use a try except 

in here we will add the object to the session and then commit it to the Database and finally redirect the user ot the home page

**You must import redirect as well**

in the else statement of our method we can create a variable that is the tasks from the database

tasks = Todo.query.order_by(Todo.date_created).all()

we then pass this into the render_template method as a parameter and set it to equal the tasks obtained from the db

return render_template('index.html' , tasks = tasks)

In our index.html we can just use a jinja for loop and then get the parameters for each 



-Delete A Task-

create a route and pass in query parameter and then the delete method
@app.route('/delete/<int:id>')


so in this method we pass in an id parameter too

we then query the database for the object with the matching db 

we then attempt to delete it if it found and then redirect the user to the home page 

    #Attempt to delete object
    db.session.delete(task_to_delete)
    #commiting to database
    db.session.commit()
    #Using redirect to redirect user to homepage
    return redirect('/')

Then we have to go to our index page and then pass in the link to the route taht will delete the current task using jinnja

<a href="/del/{{task.id}}">Delete</a>


-Update A Task-

Update works pretty much the same logic wise just a few small changes

the decorator must take in methods with post and get 
the method will take in an id and then query the database

we can then redirect the user to the a new template called update.html

this redirect will take in the task variable as a parameter which is assigned to the task we got from the db 

in the update.html we will get the task from the server and auto populate the text input the the task content

then we can go back to our update method and then chnage the todo content to what is being passed in from the webpage
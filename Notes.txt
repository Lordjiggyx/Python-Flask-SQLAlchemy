This is an introduction to using flask with python 

This tutorial will go through the following 

Setup & Workflow
Getting the app running
Templates and Static Content
Setting up a Database
Creating a basic CRUD application - TODO Liist application
Deploying to Heroku

====Setting Up Environment====
To set up the environment you need to do the following

install python 3.6+ and PIP
Intsall virtualenv
create a project directory
create a virtual environment
install required packages


-Installing python 3.6+ and PIP-
Check if you have it installed on your device if not search it up and download it


-Install virtualenv-

To install virtualenv you use PIP

this is done in the terminal window

pip install virtualenv

virtualenv allows us to create a virtual environment what this means is that if we want to work with other people or collaborated project it make sit so that all the packages are contained in thr project and not on your device so you can transefer the project and if someone else wants to use it they can just install all the packages into the working directory 

So the next thing you do is create a virtual environment

to do this in the terminal you must use the following command 

virtualenv <name>

This will create a folder where the prokect will be located

windows will then ask you if you want to use the virtual environment as the workspace folder and you say yes

You then need to activate the environment to do this you need to go to the scripts folder and run the "activate" scripts

next you need to install flask and flask-sqlalchemy using pip


You can then create a file called app.py or whatever you want to call it 

We can then go into starting by creating the index file you can check the code out for this in the commit

localhost:5000 is where this application will reside after it has been started


=== Static Content ===

Create 2 folders static and templates

Then in your app.py folder import render_template

In the templates folder createa a file called index.html

Now what we will do in app.py index() method is change waht is returned

instead of returning a string we will return the index.html file

to do this you use the render_template() method and pass in the name of the file, ou do not need to specify the folder as it knows to look in the template folder for the file

This file can contain basic html and when you refresh the page you will see its getting its content from this page 

-Template Inheritance-

Template Inheritance allows us to create 1 master html file that contains the skleton of what each page will look like and just inherit it to each other page and insert code where you need to, it reduces boilerplate code

to do this create a file called base.html in the templates folder

so in this file we willl use jinja syntax this is the template engine that flask uses 

{% block head %} {% endblock %} replace the titile with this code

This code creates a blovk which allows us to insert code in other pages that inherit this template

you can create another block for the body of the webpage

{% block body %} {% endblock %}


Then in index.html we can clear it and inherit the base template to do this you type the following 

{% extends 'base.html' %}

You can then copy the blocks and begin to put code into them using html

Once you reload the page you'll see the content is rendered 

This can be used greatly for referencing links to css


- Static Content - 

create a css folder in the static folder and create a css file and place whatever css you want

in the base.html file you can link the css file 

the only difference to linking the css file is the href

we use jinja 

we use a function from flask called url_for() and pass in the name of the folder and file name  you must incliude subdirectories too

"{{url_for('static' , filename='css/main.css')}}"

we must then also import url_for from flask

This is the same for any javascript file


***Quick Jinja Knowledge***

{% %} - is for loops ifs 
{{}} - things you want to be printed in strings this gives the result of functions pretty much

****